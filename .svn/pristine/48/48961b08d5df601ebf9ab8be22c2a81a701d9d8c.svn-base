package com.caritas.menu;

import com.caritas.controller.util.JsfUtil;
import com.caritas.entity.Accesos;
import com.esotericsoftware.yamlbeans.YamlException;
import com.esotericsoftware.yamlbeans.YamlReader;
import com.esotericsoftware.yamlbeans.YamlWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.security.InvalidParameterException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.faces.component.UIComponent;
import org.primefaces.component.menuitem.MenuItem;
import org.primefaces.component.separator.Separator;
import org.primefaces.component.submenu.Submenu;
import org.primefaces.model.DefaultMenuModel;
import org.primefaces.model.MenuModel;

/**
 *
 * @author software
 */
public class MenuFactory {

    private static final Logger LOG = Logger.getLogger(MenuFactory.class.getName());
    public static MenuFactory instance = null;

    public static MenuFactory defaultMenuFactory() {
        if (instance == null) {
            instance = new MenuFactory();
            instance.menuBundleName = "/menuBundle";
            instance.outcomesBundleName = "/outcomesBundle";
            instance.yamlConfigPath = "/config.yaml";
            instance.classLoader = MenuFactory.class.getClassLoader();
        }
        return instance;
    }

    private String menuBundleName;
    private String outcomesBundleName;
    private String yamlConfigPath;
    private ClassLoader classLoader;
    private List<SubmenuAdaptor> mainSubmenus = null;

    public MenuModel buildFullMenu() {
        return buildMenu(new FullSubAdder());
    }

    public MenuModel buildNormalMenu() {
        return buildMenu(new RestrictedSubAdder());
    }

    private MenuModel buildMenu(AbstractSubAdder add) {
        MenuModel sMenuModel = new DefaultMenuModel();
        mainSubmenus = getMainSubmenus();
        for (SubmenuAdaptor msubMenu : mainSubmenus) {
            Submenu submenu = msubMenu.buildSubmenu();
            add.addLinks(submenu, msubMenu.getForms());
            add.addSubmenus(submenu, msubMenu.getSubs());
            if (!submenu.getChildren().isEmpty()) {
                sMenuModel.addSubmenu(submenu);
            }
        }
        return sMenuModel;
    }

    public List<SubmenuAdaptor> getMainSubmenus() {
        if (mainSubmenus == null) {
            try {
                mainSubmenus = getByYamlFactory().getMainSubmenus();
            } catch (IOException ex) {
                mainSubmenus = getByBundleFactory().getMainSubmenus();
                LOG.log(Level.SEVERE, null, ex);
            }
        }
        return mainSubmenus;
    }

    public ByBundleFactory getByBundleFactory() {
        ResourceBundle menu = ResourceBundle.getBundle(menuBundleName);
        ResourceBundle outcomes = ResourceBundle.getBundle(outcomesBundleName);
        ByBundleFactory byBundleFactory = new ByBundleFactory(menu, outcomes);
        return byBundleFactory;
    }

    public ByYamlFactory getByYamlFactory() {
        InputStream input = classLoader.getResourceAsStream(yamlConfigPath);
        return new ByYamlFactory(input);
    }

    public static class ByBundleFactory {

        private ResourceBundle menuBundle;
        private ResourceBundle outcomesBundle;

        public ByBundleFactory(ResourceBundle menuBundle, ResourceBundle outcomesBundle) {
            this.menuBundle = menuBundle;
            this.outcomesBundle = outcomesBundle;
        }

        public ResourceBundle getMenuBundle() {
            return menuBundle;
        }

        public void setMenuBundle(ResourceBundle menuBundle) {
            this.menuBundle = menuBundle;
        }

        public ResourceBundle getOutcomesBundle() {
            return outcomesBundle;
        }

        public void setOutcomesBundle(ResourceBundle outcomesBundle) {
            this.outcomesBundle = outcomesBundle;
        }

        public MenuLinkAdaptor buildFormAdaptor(String name) {
            MenuLinkAdaptor formAdaptor = new MenuLinkAdaptor();
            formAdaptor.setName(name);
            try {
                if (name.equalsIgnoreCase("SEPARATOR")) {
                    formAdaptor.setSeparator(true);
                } else {
                    formAdaptor.setLabel(menuBundle.getString(name));
                }
            } catch (Exception e) {
            }
            try {
                formAdaptor.setOutcome(outcomesBundle.getString(name));
            } catch (Exception e) {
            }
            return formAdaptor;
        }

        public SubmenuAdaptor buildSubmenuAdaptorSubs(String name, List<SubmenuAdaptor> subs) {
            SubmenuAdaptor submenuAdaptor = new SubmenuAdaptor();
            submenuAdaptor.setName(name);
            submenuAdaptor.setSubs(subs);
            try {
                if (name.equalsIgnoreCase("SEPARATOR")) {
                    submenuAdaptor.setSeparator(true);
                } else {
                    submenuAdaptor.setLabel(menuBundle.getString(name));
                }
            } catch (Exception e) {
            }
            return submenuAdaptor;
        }

        public SubmenuAdaptor buildSubmenuAdaptorForms(String name, List<MenuLinkAdaptor> forms) {
            SubmenuAdaptor submenuAdaptor = new SubmenuAdaptor();
            submenuAdaptor.setName(name);
            submenuAdaptor.setForms(forms);
            try {
                if (name.equalsIgnoreCase("SEPARATOR")) {
                    submenuAdaptor.setSeparator(true);
                } else {
                    submenuAdaptor.setLabel(menuBundle.getString(name));
                }
            } catch (Exception e) {
            }
            return submenuAdaptor;
        }

        public List<SubmenuAdaptor> getMainSubmenus() {
            List<MenuLinkAdaptor> CatalogoForms = Arrays.asList(
                    buildFormAdaptor("mnuGrupoAlim"),
                    buildFormAdaptor("mnuVariedad"),
                    buildFormAdaptor("mnuUnidad"),
                    buildFormAdaptor("mnumarca"),
                    buildFormAdaptor("mnuGrupoRef"),
                    buildFormAdaptor("mnuArticulo"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuProveedores"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuNivelAcceso"),
                    buildFormAdaptor("mnuSalir"));
            List<MenuLinkAdaptor> AdminForms = Arrays.asList(
                    buildFormAdaptor("mnuSaldoInst"),
                    buildFormAdaptor("mnuAutoriza"),
                    buildFormAdaptor("mnuRepCueCob"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuTipoMov"),
                    buildFormAdaptor("mnuAbono"),
                    buildFormAdaptor("mnuRptMovtoInst"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuRptSalida_DineroNCaptado"),
                    buildFormAdaptor("mnuRptInstitucionesAbono"),
                    buildFormAdaptor("mnuRepSalIns"),
                    buildFormAdaptor("mnuRepSalDon"));
            List<MenuLinkAdaptor> AlmacenForms = Arrays.asList(
                    buildFormAdaptor("mnuExistencias"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuEntradas"),
                    buildFormAdaptor("mnuTraspasoDatos"),
                    buildFormAdaptor("mnuDisEntAlm"),
                    buildFormAdaptor("mnuRecCajas"),
                    buildFormAdaptor("mnuSalidas"),
                    buildFormAdaptor("mnuCancelarVales"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuRptArticulos"),
                    buildFormAdaptor("mnuRptEntradas"),
                    buildFormAdaptor("mnuRepMer"),
                    buildFormAdaptor("mnuRptEntProg"),
                    buildFormAdaptor("mnuRptMovtoProd"),
                    buildFormAdaptor("mnuRptMovtoProdArea"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuInventaPro"));
            List<MenuLinkAdaptor> ClasificaForms = Arrays.asList(
                    buildFormAdaptor("mnuCajas"),
                    buildFormAdaptor("mnuCajasExi"),
                    buildFormAdaptor("mnuCajasSal"),
                    buildFormAdaptor("mnuSalidaCajas"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuRptCajas"));
            List<MenuLinkAdaptor> ProAlmacenForms = Arrays.asList(
                    buildFormAdaptor("mnuAreas"),
                    buildFormAdaptor("mnuSubAreas"),
                    buildFormAdaptor("mnuProgramas"),
                    buildFormAdaptor("mnuDistribucionArea"),
                    buildFormAdaptor("mnuDistribucionPro"),
                    buildFormAdaptor("mnuAreaPrograma"),
                    buildFormAdaptor("mnuAccesoPrograma"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuGrupoInst"),
                    buildFormAdaptor("mnuInstituciones"),
                    buildFormAdaptor("mnuPreRec"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuExistenciasPro"),
                    buildFormAdaptor("mnuVales"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuRptEstatusSalida"),
                    buildFormAdaptor("mnuRptSalidas"),
                    buildFormAdaptor("mnuRptSalidaxGpoRef"),
                    buildFormAdaptor("mnuRepBenCom"),
                    buildFormAdaptor("mnuRptSalidaProd"),
                    buildFormAdaptor("mnuRptExistenciaPro"));
            List<MenuLinkAdaptor> DonantesDonForms = Arrays.asList(
                    buildFormAdaptor("mnuTipoDon"),
                    buildFormAdaptor("mnuDonantes"),
                    buildFormAdaptor("mnuSucursales"),
                    buildFormAdaptor("mnuReciboDeducible"),
                    buildFormAdaptor("mnuDonativoEspecie"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuRptDonante"),
                    buildFormAdaptor("mnuRptDonativoXDon"),
                    buildFormAdaptor("mnuRptDonativoXProg"),
                    buildFormAdaptor("mnuRptDonativoXProd"));
            List<MenuLinkAdaptor> ComedoresForms;
            ComedoresForms = Arrays.asList(
                    buildFormAdaptor("mnuExiCom"),
                    buildFormAdaptor("mnuExpProAlm"),
                    buildFormAdaptor("mnuforCom"),
                    buildFormAdaptor("mnuReqAlm"),
                    buildFormAdaptor("mnuRepSalAlm"));
            List<MenuLinkAdaptor> CamPromoForms = Arrays.asList(
                    buildFormAdaptor("mnuCamCtrl"),
                    buildFormAdaptor("mnuRepdef"));
            List<MenuLinkAdaptor> repInforForms = Arrays.asList(
                    buildFormAdaptor("mnuGenInfo"),
                    buildFormAdaptor("mnurepInfo"));
            List<MenuLinkAdaptor> AlmacenRepForms = Arrays.asList(
                    buildFormAdaptor("mnuRepEntDon"),
                    buildFormAdaptor("mnuRepEntProv"),
                    buildFormAdaptor("SEPARATOR"),
                    buildFormAdaptor("mnuSalPro"));
            List<MenuLinkAdaptor> ClasificaRepForms = Arrays.asList(
                    buildFormAdaptor("mnuRepcaj"));
            List<MenuLinkAdaptor> ProgramasRepForms = Arrays.asList(
                    buildFormAdaptor("mnuRepExiPro"));
            List<MenuLinkAdaptor> UtileriasForms = Arrays.asList(
                    buildFormAdaptor("mnuEmpresa"),
                    buildFormAdaptor("mnuFormularios"),
                    buildFormAdaptor("mnuCatUsuarios"),
                    buildFormAdaptor("mnuAccesos"));
            List<MenuLinkAdaptor> SistemasForms = Arrays.asList(
                    buildFormAdaptor("mnuAyuda"),
                    buildFormAdaptor("mnuabout"));
            List<SubmenuAdaptor> reportesSubmenus = Arrays.asList(
                    buildSubmenuAdaptorForms("mnuAlmacenRep", AlmacenRepForms),
                    buildSubmenuAdaptorForms("mnuClasificaRep", ClasificaRepForms),
                    buildSubmenuAdaptorForms("mnuProgramasRep", ProgramasRepForms));
            List<SubmenuAdaptor> procesosSubmenus = Arrays.asList(
                    buildSubmenuAdaptorForms("mnuAdmin", AdminForms),
                    buildSubmenuAdaptorForms("mnuAlmacen", AlmacenForms),
                    buildSubmenuAdaptorForms("mnuClasifica", ClasificaForms),
                    buildSubmenuAdaptorForms("mnuProAlmacen", ProAlmacenForms),
                    buildSubmenuAdaptorForms("mnuDonantesDon", DonantesDonForms),
                    buildSubmenuAdaptorForms("mnuComedores", ComedoresForms),
                    buildSubmenuAdaptorForms("mnuCamPromo", CamPromoForms),
                    buildSubmenuAdaptorForms("mnurepInfor", repInforForms));
            return Arrays.asList(
                    buildSubmenuAdaptorForms("mnuCatalogos", CatalogoForms),
                    buildSubmenuAdaptorSubs("mnuProcesos", procesosSubmenus),
                    buildSubmenuAdaptorSubs("mnuReportes", reportesSubmenus),
                    buildSubmenuAdaptorForms("mnuUtilerias", UtileriasForms),
                    buildSubmenuAdaptorForms("mnuSistemas", SistemasForms));
        }
    }

    public static class ByYamlFactory {

        InputStream input;

        public ByYamlFactory(InputStream input) {
            if (input == null) {
                throw new InvalidParameterException();
            }
            this.input = input;
        }

        public ArrayList<SubmenuAdaptor> getMainSubmenus() throws IOException {
            YamlReader yr = new YamlReader(new InputStreamReader(input));
            yr.getConfig().setClassTag("SubmenuAdaptor", SubmenuAdaptor.class);
            yr.getConfig().setPropertyElementType(SubmenuAdaptor.class, "forms", MenuLinkAdaptor.class);
            yr.getConfig().setPropertyElementType(SubmenuAdaptor.class, "subs", SubmenuAdaptor.class);
            Object read = yr.read();
            ArrayList<SubmenuAdaptor> alsa = (ArrayList<SubmenuAdaptor>) read;
            return alsa;
        }

        public void exportMenuConf(List<SubmenuAdaptor> mainSubmenus) throws YamlException, IOException {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            YamlWriter yw = new YamlWriter(new OutputStreamWriter(baos));
            yw.write(Arrays.asList(mainSubmenus));
            yw.close();
            JsfUtil.downloadFile("config.yaml", baos, "text/plain");
        }
    }

    private class RestrictedSubAdder extends AbstractSubAdder {

        private Map<String, Accesos> menuAccessMap1 = JsfUtil.getMenuAccessMap();

        RestrictedSubAdder() {
            super(true);
        }

        public void addAccessableSubmenusOnly(Submenu submenu, List<SubmenuAdaptor> subs) {
            addSubmenus(submenu, subs);
        }

        public void addAccessableLinksOnly(Submenu submenu, List<MenuLinkAdaptor> forms) {
            if (submenu == null || forms == null) {
                return;
            }
            for (MenuLinkAdaptor formAdaptor : forms) {
                boolean contains = menuAccessMap1.containsKey(formAdaptor.getName());
                boolean separator = formAdaptor.isSeparator();
                if (separator && submenu.getChildCount() > 0) {
                    if (!(submenu.getChildren().get(submenu.getChildCount() - 1) instanceof Separator)) {
                        submenu.getChildren().add(new Separator());
                    }
                }
                if (contains && !formAdaptor.isDisabled()) {
                    MenuItem menuItem = formAdaptor.buildMenuItem();
                    submenu.getChildren().add(menuItem);
                }
            }
        }

        @Override
        public void addLinks(Submenu submenu1, List<MenuLinkAdaptor> forms) {
            addAccessableLinksOnly(submenu1, forms);
        }
    }

    private class FullSubAdder extends AbstractSubAdder {

        FullSubAdder() {
            super(false);
        }

        public void addAllLinks(Submenu submenu, List<MenuLinkAdaptor> forms) {
            if (submenu == null) {
                return;
            }
            if (forms == null) {
                return;
            }
            for (MenuLinkAdaptor formAdaptor : forms) {
                UIComponent menuItem;
                menuItem = formAdaptor.isSeparator()
                        ? (UIComponent) new Separator()
                        : (UIComponent) formAdaptor.buildMenuItem();
                submenu.getChildren().add(menuItem);
            }
        }

        @Override
        public void addLinks(Submenu submenu1, List<MenuLinkAdaptor> forms) {
            addAllLinks(submenu1, forms);
        }
    }

    private abstract class AbstractSubAdder {

        private boolean accessableOnly;

        AbstractSubAdder(boolean accessableOnly) {
            this.accessableOnly = accessableOnly;
        }

        public void addSubmenus(Submenu submenu, List<SubmenuAdaptor> subs) {
            if ((submenu == null) || (subs == null)) {
                return;
            }
            for (SubmenuAdaptor submenuA : subs) {
                Submenu submenu1 = submenuA.buildSubmenu();
                addLinks(submenu1, submenuA.getForms());
                addSubmenus(submenu1, submenuA.getSubs());
                if (!submenu1.getChildren().isEmpty() || !accessableOnly) {
                    submenu.getChildren().add(submenu1);
                }
            }

        }

        public abstract void addLinks(Submenu submenu1, List<MenuLinkAdaptor> forms);
    }
}
