package com.caritas.controller;

import com.caritas.controller.util.JsfUtil;
import com.caritas.controller.util.noRowController.CrudController;
import com.caritas.entity.BancosDeAlimentos;
import com.caritas.facade.BancosDeAlimentosFacade;
import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.bean.ViewScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;
import javax.faces.model.DataModel;
import javax.faces.model.SelectItem;
import org.primefaces.model.LazyDataModel;
import org.primefaces.model.SortOrder;

@ManagedBean(name = "bancosDeAlimentosController")
@ViewScoped
public class BancosDeAlimentosController implements Serializable, CrudController {

    @EJB
    private com.caritas.facade.BancosDeAlimentosFacade ejbFacade;
    @ManagedProperty("#{bancosDeAlimentosSelected}")
    private BancosDeAlimentosSelected bdas;
    private LazyDataModel<BancosDeAlimentos> items = new LazyDataModel<BancosDeAlimentos>() {
        @Override
        public List<BancosDeAlimentos> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, String> filters) {
            return ejbFacade.findRange(new int[]{first, first + pageSize});
        }
    };

    //<editor-fold defaultstate="collapsed" desc="init">
    public BancosDeAlimentosController() {
    }

    @PostConstruct
    private void initialize() {
        items.setRowCount(ejbFacade.count());
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="Getter/Setter">

    public void setBdas(BancosDeAlimentosSelected bdas) {
        this.bdas = bdas;
    }

    public void setSelected(BancosDeAlimentos selected) {
        bdas.setSelected(selected);
    }

    public BancosDeAlimentos getSelected() {
        return bdas.getCurrent();
    }

    public DataModel getItems() {
        return items;
    }

    public SelectItem[] getItemsAvailableSelectMany() {
        return JsfUtil.getSelectItems(ejbFacade.findAll(), false);
    }

    public SelectItem[] getItemsAvailableSelectOne() {
        return JsfUtil.getSelectItems(ejbFacade.findAll(), true);
    }

    public BancosDeAlimentos getBancosDeAlimentos(java.lang.Integer id) {
        return ejbFacade.find(id);
    }

    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="Prepare">
    public String prepareList() {
        return "List";
    }

    public String prepareView() {
        setSelected((BancosDeAlimentos) getItems().getRowData());
        return "View";
    }

    public String prepareCreate() {
        setSelected(new BancosDeAlimentos());
        return "Create";
    }

    public String prepareEdit() {
        setSelected((BancosDeAlimentos) getItems().getRowData());
        return "Edit";
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="Commit">

    public String create() {
        BancosDeAlimentos s = getSelected();
        if (s == null) {
            JsfUtil.addErrorMessage(ResourceBundle.getBundle("/Bundle").getString("RequiredMessage_NullSelected_Key"));
            return null;
        }
        try {
            ejbFacade.create(s);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/Bundle").getString("BancosDeAlimentosCreated"));
            return "View";
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e.getMessage());
            return null;
        }
    }

    public String update() {
        BancosDeAlimentos s = getSelected();
        if (s == null) {
            JsfUtil.addErrorMessage(ResourceBundle.getBundle("/Bundle").getString("RequiredMessage_NullSelected_Key"));
            return null;
        }
        if (ejbFacade.find(s.getIDBancoDeAlimentos()) == null) {
            JsfUtil.addErrorMessage(ResourceBundle.getBundle("/Bundle").getString("Error_RowNoLongerExists"));
            return null;
        }
        try {
            ejbFacade.edit(getSelected());
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/Bundle").getString("BancosDeAlimentosUpdated"));
            return "View";
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, e.getLocalizedMessage());
            return null;
        }
    }

    public String destroy() {
        BancosDeAlimentos rowData = items.getRowData();
        if (ejbFacade.find(rowData.getIDBancoDeAlimentos()) == null) {
            JsfUtil.addErrorMessage(ResourceBundle.getBundle("/Bundle").getString("Error_RowNoLongerExists"));
            return null;
        }
        try {
            ejbFacade.remove(rowData);
            setSelected(null);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/Bundle").getString("ArticulosDeleted"));
            return "List";
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, e.getLocalizedMessage());
            return null;
        }
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="NoRow">

    @Override
    public String prepareViewNoRow() {
        return "View";
    }

    @Override
    public String prepareEditNoRow() {
        return "Edit";
    }

    @Override
    public String destroyNoRow() {
        BancosDeAlimentos s = getSelected();
        if (s != null && ejbFacade.find(s.getIDBancoDeAlimentos()) != null) {
            try {
                ejbFacade.remove(s);
                setSelected(null);
            } catch (Exception e) {
                JsfUtil.addErrorMessage(e.getLocalizedMessage());
            }
        }
        return "List";
    }
    //</editor-fold>

    @FacesConverter(forClass = BancosDeAlimentos.class)
    public static class BancosDeAlimentosControllerConverter implements Converter {

        @Override
        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            BancosDeAlimentosController controller = (BancosDeAlimentosController) facesContext.getApplication().getELResolver().
                    getValue(facesContext.getELContext(), null, "bancosDeAlimentosController");
            return controller.getBancosDeAlimentos(getKey(value));
        }

        java.lang.Integer getKey(String value) {
            java.lang.Integer key;
            key = Integer.valueOf(value);
            return key;
        }

        String getStringKey(java.lang.Integer value) {
            StringBuilder sb = new StringBuilder();
            sb.append(value);
            return sb.toString();
        }

        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return null;
            }
            if (object instanceof BancosDeAlimentos) {
                BancosDeAlimentos o = (BancosDeAlimentos) object;
                return getStringKey(o.getIDBancoDeAlimentos());
            } else {
                throw new IllegalArgumentException("object " + object + " is of type " + object.getClass().getName() + "; expected type: " + BancosDeAlimentos.class.getName());
            }
        }
    }

    @ManagedBean(name = "bancosDeAlimentosCompleter")
    @ApplicationScoped
    public static class BancosDeAlimentosCompleter {

        @EJB
        private BancosDeAlimentosFacade bancos;
        @ManagedProperty("#{parametersController.suggestionLength}")
        private int length;

        public List<BancosDeAlimentos> complete(String query) {
            return bancos.findLike(query, length);
        }

        public void setLength(int length) {
            this.length = length;
        }
    }

    @ManagedBean(name = "bancosDeAlimentosSelected")
    @SessionScoped
    public static class BancosDeAlimentosSelected implements Serializable {

        private BancosDeAlimentos current;

        public BancosDeAlimentos getCurrent() {
            return current;
        }

        public void setSelected(BancosDeAlimentos current) {
            this.current = current;
        }
    }
}
