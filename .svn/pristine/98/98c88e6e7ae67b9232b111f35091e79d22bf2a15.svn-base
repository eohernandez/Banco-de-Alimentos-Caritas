package com.caritas.controller;

import com.caritas.controller.util.JsfUtil;
import com.caritas.controller.util.pdf.DistAmbaPdf;
import com.caritas.entity.BancosDeAlimentos;
import com.caritas.entity.DistribucionAMBA;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.model.SelectItem;
import com.caritas.entity.Donantes;
import com.caritas.entity.Movimientos;
import com.caritas.entity.Sucursales;
import com.caritas.facade.MovimientosFacade;
import com.itextpdf.text.DocumentException;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.faces.bean.ViewScoped;

@ManagedBean(name = "distribucionAMBAController")
@ViewScoped
public class DistribucionAMBAController implements Serializable {

    private transient static final Logger LOG = Logger.getLogger(MovimientosController.class.getName());
    private Movimientos current;
    private ArrayList<DistribucionAMBA> items;
//    private ArrayList<DistribucionAMBA> itemsSelected;
    @EJB
    private com.caritas.facade.MovimientosFacade ejbFacade;
    private List<BancosDeAlimentos> bancosDeAlimentos;
    private String cedisOrigen;
    private String transporteRequerido;
    private double poblacionTotal;
    private double kilosTotales;
    private int piezasTotales;
    private double fletesTotales;
    private boolean folioSelected = false;

    public DistribucionAMBAController() {
    }

    @PostConstruct
    public void Inicio() {
        prepareDistribucionAMBA();
    }

    private void prepareDistribucionAMBA() {
        current = null;
        getSelected().setIDDonante(new Donantes());
        getSelected().setIDSucursales(new Sucursales());

        GregorianCalendar cal = new GregorianCalendar();
        current.setFechaMov(cal.getTime());

        setBancosDeAlimentos(getFacade().findBancosDeAlimentos());

        NewItems();

        folioSelected = false;
    }

    /**
     * Inicializa la lista de Items que se mostrarán en la Tabla de Distribución
     */
    private void NewItems() {
        poblacionTotal = 0.0;
        kilosTotales = 0.0;
        fletesTotales = 0.0;
        items = new ArrayList<DistribucionAMBA>();
        // Recorremos toda la lista de bancos de alimentos
        for (BancosDeAlimentos banco : bancosDeAlimentos) {

            // Por cada banco de alimentos creamos una distribución con
            // su nombre y población y valores predeterminados
            DistribucionAMBA distribucion =
                    new DistribucionAMBA(
                    false, "", banco.getNombre(), banco.getPoblacion(),
                    0.0, 0.0, 0, 0.0, "");

            // Agregamos la distribución a la lista que se mostrará en la Tabla
            getItems().add(distribucion);
        }
    }

    public Movimientos getSelected() {
        if (current == null) {
            current = new Movimientos();
        }
        return current;
    }

    private MovimientosFacade getFacade() {
        return ejbFacade;
    }

    public void viewIDFolio() {
        NewItems();
        if (!getSelected().getIDFolio().trim().isEmpty()) {
            if (getSelected().getIDFolio().length() < 10) {
                String folio10 = "          ".concat(getSelected().getIDFolio().trim());
                folio10 = folio10.substring(folio10.length() - 10, folio10.length());
                getSelected().setIDFolio(folio10);
            }

            current = ejbFacade.findMovimientoEntradaAMBA(getSelected().getIDFolio());

            if (getSelected().getIDFolio() != null) {
                folioSelected = true;

                kilosTotales = getFacade().findKilosMovtosDet(getSelected().getIDFolio());
            } else {
                prepareDistribucionAMBA();
            }
        }
    }

    public List<String> CompleteFolios(String query) {
        try {
            List<String> results = getFacade().findFoliosEntAmbaLike(query);
            return results;
        } catch (Exception e) {
            return null;
        }
    }

    public void RecibeChange(DistribucionAMBA itemSelected) {
        CalculaTotales();
        CalculaPorcentaje();
    }

    private void CalculaTotales() {
        poblacionTotal = 0;
        fletesTotales = 0;
        for (DistribucionAMBA distribucion : items) {
            if (distribucion.getRecibe()) {
                poblacionTotal += distribucion.getPoblacion();
                fletesTotales += distribucion.getFlete();
            }
        }
    }

    public void CalculaPorcentaje() {
        double unPorcientoPoblacion = poblacionTotal / 100;

        for (DistribucionAMBA distribucion : items) {
            if (distribucion.getRecibe()) {
                distribucion.setPorcentaje(distribucion.getPoblacion() / unPorcientoPoblacion);
                distribucion.setKilogramos(kilosTotales * distribucion.getPorcentaje() / 100);
                distribucion.setFlete(fletesTotales * distribucion.getPorcentaje() / 100);
                distribucion.setPiezasDouble(piezasTotales * distribucion.getPorcentaje() / 100);
            } else {
                distribucion.setPorcentaje(0.0);
                distribucion.setKilogramos(0.0);
                distribucion.setFlete(0.0);
            }
        }
    }
    
    public void exportar() throws IOException, DocumentException {
        ByteArrayOutputStream createPdf = new DistAmbaPdf(items, getReportMap()).createPdf();
        
        JsfUtil.downloadFile("Dist_Amba_" +getFechaRep() +"_(" +getSelected().getIDFolio().trim() +").pdf", createPdf);
    }
    
    private HashMap<String, Object> getReportMap() {
        HashMap<String, Object> map = new HashMap<String, Object>();
        
        map.put("FOLIO", getSelected().getIDFolio().trim());
        map.put("CEDIS", getCedisOrigen());
        map.put("DONANTE", getSelected().getIDDonante().getDonante());
        if (getSelected().getIDDonante().getSucursales()) {
            // Se agrega la sucursal solo si tiene
            map.put("SUCURSAL", getSelected().getIDSucursales().getIDSucursal());
        }
        map.put("FECHA", getFechaRep());
        map.put("POBLACION", getPoblacionTotal());
        map.put("PORCENTAJE", getPorcentajeTotal());
        map.put("KILOGRAMOS", getKilosTotalesString());
        map.put("PIEZAS", getPiezasTotales());
        map.put("FLETES", getFletesTotalesString());
        
        return map;
    }

    public SelectItem[] getItemsAvailableSelectDonantes() {
        return JsfUtil.getSelectItems(ejbFacade.findAllDonantes(), false);
    }

    public SelectItem[] getItemsAvailableSelectSucursales() {
        return JsfUtil.getSelectItems(ejbFacade.findSucursales(getSelected().getIDDonante()), false);
    }

    /**
     * Redondea arriba a las decimales deseadas el valor deseado.
     *
     * @param valorARedondear El valor a redondear.
     * @param decimales La cantidad de decimales que tendrá el número después de
     * ser redondeado.
     * @return El valor <code>double</code> redondeado arriba a 2 dígitos.
     */
    private double RedondearDecimales(double valorARedondear, int decimales) {
        BigDecimal big = new BigDecimal(valorARedondear);
        big = big.setScale(decimales, RoundingMode.HALF_UP);

        return big.doubleValue();
    }

    public String getPorcentajeTotal() {
        for (DistribucionAMBA distribucion : items) {
            if (distribucion.getRecibe()) {
                return "100.0 %";
            }
        }

        return "0.0 %";
    }

    public String getFechaRep() {
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

        return df.format(getSelected().getFechaMov());
    }

    // <editor-fold defaultstate="collapsed" desc="Setters & Getters" >
    public List<DistribucionAMBA> getItems() {
        return items;
    }

    public void setItems(ArrayList<DistribucionAMBA> items) {
        this.items = items;
    }

    public String getCedisOrigen() {
        return cedisOrigen;
    }

    public void setCedisOrigen(String cedisOrigen) {
        this.cedisOrigen = cedisOrigen;
    }

    public String getTransporteRequerido() {
        return transporteRequerido;
    }

    public void setTransporteRequerido(String transporteRequerido) {
        this.transporteRequerido = transporteRequerido;
    }

    public List<BancosDeAlimentos> getBancosDeAlimentos() {
        return bancosDeAlimentos;
    }

    public void setBancosDeAlimentos(List<BancosDeAlimentos> bancosDeAlimentos) {
        this.bancosDeAlimentos = bancosDeAlimentos;
    }

    public Double getPoblacionTotal() {
        return poblacionTotal;
    }

    public Double getKilosTotales() {
        return kilosTotales;
    }

    public String getKilosTotalesString() {
        return String.valueOf(RedondearDecimales(kilosTotales, 2));
    }

    public int getPiezasTotales() {
        return piezasTotales;
    }

    public Double getFletesTotales() {
        return fletesTotales;
    }

    public String getFletesTotalesString() {
        if (fletesTotales == 0) {
            return "$ - ";
        } else {
            return "$ " + String.valueOf(RedondearDecimales(fletesTotales, 2));
        }
    }

    public boolean isFolioSelected() {
        return folioSelected;
    }
    // </editor-fold>
}
