package com.caritas.controller;

import com.caritas.controller.util.JsfUtil;
import com.caritas.controller.util.PaginationHelper;
import com.caritas.entity.Accesos;
import com.caritas.entity.Usuarios;
import com.caritas.facade.UsuariosFacade;
import com.caritas.menu.MenuFactory;
import java.io.Serializable;
import java.util.Collection;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.TreeMap;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import org.primefaces.model.DefaultMenuModel;
import org.primefaces.model.MenuModel;

@ManagedBean(name = "usuariosController")
@SessionScoped
public class UsuariosController implements Serializable {

    private static final Logger LOG = Logger.getLogger(UsuariosController.class.getName());
    private Usuarios current;
    private DataModel items = null;
    @EJB
    private com.caritas.facade.UsuariosFacade ejbFacade;
    private PaginationHelper pagination;
    private int selectedItemIndex;
    private String IDUsuarioTemp;
    private transient MenuModel sMenuModel = null;

    public UsuariosController() {
    }

    public Usuarios getSelected() {
        if (current == null) {
            current = new Usuarios();
            selectedItemIndex = -1;
        }
        return current;
    }

    private UsuariosFacade getFacade() {
        return ejbFacade;
    }

    public PaginationHelper getPagination() {
        if (pagination == null) {
            pagination = new PaginationHelper(10) {
                @Override
                public int getItemsCount() {
                    return getFacade().count();
                }

                @Override
                public DataModel createPageDataModel() {
                    return new ListDataModel(getFacade().findRange(new int[]{getPageFirstItem(), getPageFirstItem() + getPageSize()}));
                }
            };
        }
        return pagination;
    }

    public String prepareList() {
        recreateModel();
        return "List";
    }

    public String prepareView() {
        current = (Usuarios) getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        return "View";
    }

    public String prepareCreate() {
        current = new Usuarios();
        selectedItemIndex = -1;
        return "Create";
    }

    public String create() {
        try {
            getFacade().create(current);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/Bundle").getString("UsuariosCreated"));
            return prepareCreate();
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle("/Bundle").getString("PersistenceErrorOccured"));
            return null;
        }
    }

    public String prepareEdit() {
        current = (Usuarios) getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        return "Edit";
    }

    public String update() {
        try {
            getFacade().edit(current);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/Bundle").getString("UsuariosUpdated"));
            return "View";
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle("/Bundle").getString("PersistenceErrorOccured"));
            return null;
        }
    }

    public String destroy() {
        current = (Usuarios) getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        performDestroy();
        recreatePagination();
        recreateModel();
        return "List";
    }

    public String destroyAndView() {
        performDestroy();
        recreateModel();
        updateCurrentItem();
        if (selectedItemIndex >= 0) {
            return "View";
        } else {
            // all items were removed - go back to list
            recreateModel();
            return "List";
        }
    }

    private void performDestroy() {
        try {
            getFacade().remove(current);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/Bundle").getString("UsuariosDeleted"));
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle("/Bundle").getString("PersistenceErrorOccured"));
        }
    }

    private void updateCurrentItem() {
        int count = getFacade().count();
        if (selectedItemIndex >= count) {
            // selected index cannot be bigger than number of items:
            selectedItemIndex = count - 1;
            // go to previous page if last page disappeared:
            if (pagination.getPageFirstItem() >= count) {
                pagination.previousPage();
            }
        }
        if (selectedItemIndex >= 0) {
            current = getFacade().findRange(new int[]{selectedItemIndex, selectedItemIndex + 1}).get(0);
        }
    }

    public DataModel getItems() {
        if (items == null) {
            items = getPagination().createPageDataModel();
        }
        return items;
    }

    private void recreateModel() {
        items = null;
    }

    private void recreatePagination() {
        pagination = null;
    }

    public String next() {
        getPagination().nextPage();
        recreateModel();
        return "List";
    }

    public String previous() {
        getPagination().previousPage();
        recreateModel();
        return "List";
    }

    public SelectItem[] getItemsAvailableSelectMany() {
        return JsfUtil.getSelectItems(ejbFacade.findAll(), false);
    }

    public SelectItem[] getItemsAvailableSelectOne() {
        return JsfUtil.getSelectItems(ejbFacade.findAll(), true);
    }

    public Usuarios getLoggedUser() {
        return JsfUtil.getLoggedUser();
    }

    public MenuModel getSystemMenu() {
        if (sMenuModel != null) {
            return sMenuModel;
        }
        if (getLoggedUser() == null) {
            return new DefaultMenuModel();
        }
        sMenuModel = MenuFactory.defaultMenuFactory().buildNormalMenu(JsfUtil.getMenuAccessMap().keySet());
        return sMenuModel;
    }

    private void buildMaps() {
        FacesContext fc = FacesContext.getCurrentInstance();
        ExternalContext ec = fc.getExternalContext();
        Map<String, Object> sessionMap = ec.getSessionMap();
        Usuarios loggedUser = getLoggedUser();
        if (loggedUser == null) {
            /* No se pueden construir los mapas de accesos si no hay usuario */
            sessionMap.put("menuAccessMap", null);
            sessionMap.put("formAccessMap", null);
            return;
        }
        Collection<Accesos> accesosCollection =
                loggedUser.getIDNivel().getAccesosCollection();
        Map<String, Accesos> menuAccessMap = new TreeMap<String, Accesos>();
        Map<String, Accesos> formAccessMap = new TreeMap<String, Accesos>();
        for (Accesos accesos : accesosCollection) {
            try {
                boolean isSub = accesos.getSubMenu();
                String idForm = accesos.getIDForm().getIDForm();
                Map<String, Accesos> amap = (isSub
                        ? menuAccessMap
                        : formAccessMap);
                amap.put(idForm, accesos);
            } catch (NullPointerException e) {
            }
        }
        sessionMap.put("menuAccessMap", menuAccessMap);
        sessionMap.put("formAccessMap", formAccessMap);
    }

    public String CheckValidUser() {
        try {
            String control = "caritas";
            String username = IDUsuarioTemp;
            current.setIDUsuario(IDUsuarioTemp);
            Usuarios usuario = getFacade().validateUser(username);
            if (usuario == null) {
                JsfUtil.addErrorMessage(ResourceBundle.getBundle("/Bundle").getString("ErrorLogin"));
                return null;
            } else if (username.equalsIgnoreCase(usuario.getIDUsuario())) {
                FacesContext facesContext = FacesContext.getCurrentInstance();

                Map<String, Object> sessionMap;
                sessionMap = facesContext.getExternalContext().getSessionMap();
                sessionMap.put("username", usuario);

                if (current.getPassword().equals(usuario.getPassword())) {
                    sessionMap.put("control", control);
                    buildMaps();
                    return "/index?faces-redirect=true";
                } else {
                    JsfUtil.addErrorMessage(ResourceBundle.getBundle("/Bundle").getString("ErrorLogin"));
                    return null;
                }
            }
        } catch (Exception e) {
            LOG.warning(e.getMessage());
        }
        return null;
    }

    public String LogOut() {
        FacesContext.getCurrentInstance().getExternalContext().getSessionMap().clear();
        return "/login";
    }

    public String userSession() {
        String idUsuario;
        try {
            idUsuario = JsfUtil.getLoggedUser().getIDUsuario();
        } catch (NullPointerException npe) {
            idUsuario = "";
        }
        return idUsuario;
    }

    public String getIDUsuarioTemp() {
        try {
            IDUsuarioTemp = JsfUtil.getLoggedUser().getIDUsuario();
            FacesContext.getCurrentInstance().getExternalContext().getSessionMap().clear();
        } catch (NullPointerException npe) {
        }
        return IDUsuarioTemp;
    }

    public void setIDUsuarioTemp(String IDUsuarioTemp) {
        this.IDUsuarioTemp = IDUsuarioTemp;
    }

    @FacesConverter(forClass = Usuarios.class)
    public static class UsuariosControllerConverter implements Converter {

        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            UsuariosController controller = (UsuariosController) facesContext.getApplication().getELResolver().
                    getValue(facesContext.getELContext(), null, "usuariosController");
            return controller.ejbFacade.find(getKey(value));
        }

        java.lang.String getKey(String value) {
            java.lang.String key;
            key = value;
            return key;
        }

        String getStringKey(java.lang.String value) {
            StringBuilder sb = new StringBuilder();
            sb.append(value);
            return sb.toString();
        }

        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return null;
            }
            if (object instanceof Usuarios) {
                Usuarios o = (Usuarios) object;
                return getStringKey(o.getIDUsuario());
            } else {
                throw new IllegalArgumentException("object " + object + " is of type " + object.getClass().getName() + "; expected type: " + UsuariosController.class.getName());
            }
        }
    }
}
